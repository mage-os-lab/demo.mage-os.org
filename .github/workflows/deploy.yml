name: Deploy to Server

# SSH Setup Instructions:
# 1. Generate SSH key pair: ssh-keygen -t ed25519 -C "github-actions"
# 2. Add public key to server: ~/.ssh/authorized_keys
# 3. Add private key to GitHub secrets as SSH_PRIVATE_KEY
# 4. Set SSH_HOST (server hostname/IP) and SSH_USER in GitHub secrets

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Maintenance Page
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd demo.mage-os.org

          rm htdocs
          mkdir htdocs
          echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Demo Environment - Maintenance</title><style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;background:#f5f5f5}.container{max-width:600px;margin:0 auto;background:white;padding:40px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}.logo{font-size:2em;color:#ff6900;margin-bottom:20px}h1{color:#333;margin-bottom:20px}p{color:#666;line-height:1.6}.spinner{border:4px solid #f3f3f3;border-top:4px solid #ff6900;border-radius:50%;width:40px;height:40px;animation:spin 1s linear infinite;margin:20px auto}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}</style></head><body><div class="container"><h1>We'\''re resetting the demo environment</h1><div class="spinner"></div><p>This process takes approximately 5-10 minutes. Please come back shortly!</p></div><script>setTimeout(()=>location.reload(),30000)</script></body></html>' > htdocs/index.html
          echo 'RewriteEngine On' > htdocs/.htaccess
          echo 'RewriteCond %{REQUEST_FILENAME} !-f' >> htdocs/.htaccess
          echo 'RewriteCond %{REQUEST_FILENAME} !-d' >> htdocs/.htaccess
          echo 'RewriteRule ^(.*)$ index.html [L]' >> htdocs/.htaccess

          echo "Maintenance page deployed"
        EOF

    - name: Prepare Fresh Environment
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error

          cd demo.mage-os.org

          composer create-project --no-install --no-progress --repository-url=https://repo.mage-os.org/ mage-os/project-community-edition temp
          mv temp/composer.json .
          rm -rf composer.lock vendor dev generated var pub app
          composer install --no-progress
          composer require --no-progress graycore/magento2-cors
          rm -rf .htaccess temp

          echo "Environment preparation completed successfully"
        EOF

    - name: Clean Database
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error

          # Drop all tables
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} ${{ secrets.DB_NAME }} -sN -e "SHOW TABLES;" 2>/dev/null | while read table; do
            if [ ! -z "$table" ]; then
              echo "Dropping table: $table"
              mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} ${{ secrets.DB_NAME }} -e "SET FOREIGN_KEY_CHECKS = 0; DROP TABLE IF EXISTS \`$table\`;" 2>/dev/null
            fi
          done

          # Drop all views
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} ${{ secrets.DB_NAME }} -sN -e "SELECT TABLE_NAME FROM information_schema.VIEWS WHERE TABLE_SCHEMA = '${{ secrets.DB_NAME }}';" 2>/dev/null | while read view; do
            if [ ! -z "$view" ]; then
              echo "Dropping view: $view"
              mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASS }} ${{ secrets.DB_NAME }} -e "DROP VIEW IF EXISTS \`$view\`;" 2>/dev/null
            fi
          done

          echo "Database cleaned successfully"
        EOF

    - name: Install Mage-OS
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error

          cd demo.mage-os.org

          bin/magento sampledata:deploy

          bin/magento setup:install \
              --db-host=${{ secrets.DB_HOST }} \
              --db-name=${{ secrets.DB_NAME }} \
              --db-user=${{ secrets.DB_USER }} \
              --db-password=${{ secrets.DB_PASS }} \
              --base-url=https://demo.mage-os.org/ \
              --base-url-secure=https://demo.mage-os.org/ \
              --backend-frontname=${{ secrets.BACKEND_FRONTNAME }} \
              --use-secure=1 \
              --use-secure-admin=1 \
              --use-rewrites=1 \
              --session-save=redis \
              --session-save-redis-host=${{ secrets.SESSION_REDIS_HOST }} \
              --session-save-redis-port=${{ secrets.SESSION_REDIS_PORT }} \
              --session-save-redis-db=${{ secrets.SESSION_REDIS_DB }} \
              --cache-backend=redis \
              --cache-backend-redis-server=${{ secrets.CACHE_REDIS_HOST }} \
              --cache-backend-redis-port=${{ secrets.CACHE_REDIS_PORT }} \
              --cache-backend-redis-db=${{ secrets.CACHE_REDIS_DB }} \
              --page-cache=redis \
              --page-cache-redis-server=${{ secrets.PAGECACHE_REDIS_HOST }} \
              --page-cache-redis-port=${{ secrets.PAGECACHE_REDIS_PORT }} \
              --page-cache-redis-db=${{ secrets.PAGECACHE_REDIS_DB }} \
              --admin-firstname=Admin \
              --admin-lastname=Mage-OS \
              --admin-email='${{ secrets.ADMIN_EMAIL }}' \
              --admin-user=${{ secrets.ADMIN_USER }} \
              --admin-password=${{ secrets.ADMIN_PASS }} \
              --language=en_US \
              --currency=USD \
              --timezone='Europe/Rome' \
              --opensearch-host=${{ secrets.OPENSEARCH_HOST }} \
              --opensearch-port=${{ secrets.OPENSEARCH_PORT }} \
              --use-sample-data

          echo "Mage-OS installation completed successfully"
        EOF

    - name: Configure GraphQL CORS
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error

          cd demo.mage-os.org

          # Add CORS configuration to app/etc/env.php
          php -r "
            \$envFile = 'app/etc/env.php';
            \$config = include \$envFile;
            \$config['system']['default']['web']['graphql'] = [
                'cors_max_age' => 86400,
                'cors_allow_credentials' => 1,
                'cors_allowed_methods' => 'POST, OPTIONS, GET',
                'cors_expose_headers' => 'X-Magento-Cache-Id',
                'cors_allowed_headers' => 'Content-Currency, Store, X-Magento-Cache-Id, X-Captcha, Content-Type, Authorization, DNT, TE',
                'cors_allowed_origins' => 'https://demo.daff.io'
            ];
            file_put_contents(\$envFile, '<?php' . PHP_EOL . 'return ' . var_export(\$config, true) . ';' . PHP_EOL);
          "

          echo "CORS configuration added successfully"
        EOF

    - name: Configure Sample Data and Production Settings
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e  # Exit on any error

          cd demo.mage-os.org

          bin/magento module:disable Magento_TwoFactorAuth
          bin/magento setup:upgrade
          bin/magento config:set --scope=default --scope-code=0 system/full_page_cache/caching_application 2
          bin/magento deploy:mode:set production
          bin/magento indexer:reindex
          bin/magento cache:flush

          rm -rf htdocs
          ln -s pub htdocs

          echo "Mage-OS demo deployment completed successfully"
        EOF
